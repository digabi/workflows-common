name: "Queue integration test run"

inputs:
  image_tag_latest:
    description: "Docker image tag (branch_latest) that was build in previous step"
    type: string
    required: true
  test_workflow_file:
    description: "Test workflow file name"
    type: string
    required: true
  test_status_name:
    description: "Test status name"
    type: string
    required: true
  cross_repo_access_token:
    description: "Token for cross-repo access"
    type: string
    required: false

runs:
  using: "composite"
  steps:
    - id: last-sha
      uses: digabi/workflows-common/actions/last-commit-sha@main

    - name: Set environment variables
      shell: bash
      run: |
        echo "TARGET_BRANCH=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
        echo "INTEGRATION_TESTS_REPO=digabi/integration-tests" >> $GITHUB_ENV

    - name: Mark tests pending
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh api repos/${{ github.repository }}/statuses/${{ steps.last-sha.outputs.last_commit_sha }} \
          -F state=pending \
          -F context=${{ inputs.test_status_name }} \
          -F description='Waiting for integration-tests'
      shell: bash

    - name: Determine integration-tests branch
      id: integration-tests
      env:
        GH_TOKEN: ${{ inputs.cross_repo_access_token }}
      run: |
        if gh api repos/${{ env.INTEGRATION_TESTS_REPO }}/branches/${{ env.TARGET_BRANCH }} &>/dev/null; then
          echo "branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        else
          echo "branch=master" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Dispatch test workflow
      env:
        GH_TOKEN: ${{ inputs.cross_repo_access_token }}
      run: |
        gh workflow run ${{ inputs.test_workflow_file }} \
          -R ${{ env.INTEGRATION_TESTS_REPO }} \
          -r "${{ steps.integration-tests.outputs.branch }}" \
          -F image_tag_latest="${{ inputs.image_tag_latest }}" \
          -F sha="${{ steps.last-sha.outputs.last_commit_sha }}" \
          -F repository="${{ github.repository }}"
      shell: bash
