name: "Docker Build&Push"

on:
  workflow_call:
    inputs:
      image-name:
        description: "Name of the Docker image"
        required: true
        type: string
      docker-target:
        description: "Target stage for the Docker build (e.g., production, staging) need "
        required: false
        type: string
      no-npm:
        description: "set to true to skip node setup if unecessary"
        required: false
        type: boolean
        default: false
      file:
        description: "Path to the Dockerfile"
        required: false
        type: string
        default: "Dockerfile"
      context:
        description: "Context for the Docker build"
        required: false
        type: string
        default: "."
      tag-latest:
        description: "Set to true to tag the image with latest"
        required: false
        type: boolean
        default: false
    secrets:
      NPM_TOKEN:
        description: "NPM authentication token for private packages"
        required: true
      AWS_ACCOUNT_ID:
        description: "AWS Account ID for ECR access"
        required: true
    outputs:
      image_tag_latest:
        description: "Latest tag for the Docker image"
        value: ${{ jobs.docker-build.outputs.image_tag_latest }}
      image_tag:
        description: "Build tag for the Docker image"
        value: ${{ jobs.docker-build.outputs.image_tag }}

jobs:
  docker-build:
    name: Docker build
    runs-on: ubuntu-latest
    outputs:
      image_tag_latest: ${{ steps.docker-tags.outputs.image_tag_latest }}
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        if: ${{ !inputs.no-npm }}
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Assume AWS role
        uses: digabi/workflows-common/actions/assume-digabi-aws-role@use-gh-for-test-images
        with:
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - id: docker-tags
        uses: digabi/workflows-common/actions/ecr-image-tags@main
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          file: ${{ inputs.file }}
          context: ${{ inputs.context }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}:${{ steps.docker-tags.outputs.image_tag }}
          provenance: false
          target: ${{ inputs.docker-target }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            npmrc=//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
      - name: Log in to the GitHub Container registry
        if: ${{ inputs.tag-latest}}
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push latest tag to GitHub Container Registry
        if: ${{ inputs.tag-latest }}
        uses: docker/build-push-action@v5
        with:
          push: true
          file: ${{ inputs.file }}
          context: ${{ inputs.context }}
          tags: ghcr.io/digabi/${{ inputs.image-name }}:${{ steps.docker-tags.outputs.image_tag_latest }}
          provenance: false
          target: ${{ inputs.docker-target }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            npmrc=//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
      - name: Delete orphaned images from Github Container Registry
        uses: actions/delete-package-versions@v5
        with: 
          package-name: ${{ inputs.image-name }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'
                
